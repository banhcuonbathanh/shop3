# events {
#   # Add directives here (optional for most cases)
# }
# http {

#       log_format myformat '$remote_addr - $remote_user [$time_local] '
#                         '"$request" $status $body_bytes_sent '
#                         '"$http_referer" "$http_user_agent"';
#     access_log /var/log/nginx/access.log myformat;
# proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=NginxCache:20m inactive=60m max_size=10g;

# limit_req_zone $binary_remote_addr zone=limitbyaddr:10m rate=1r/s;
# limit_req_status 429;
# server {
#     listen 8082;
#     limit_req zone=limitbyaddr burst=10 delay=5;

#     location /fe/ {
#         proxy_pass http://host.docker.internal:3000/;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_cache_bypass $http_upgrade;

#         # Add custom logging directives here
#         access_log /var/log/nginx/fe_access.log;
     
#     }

#     location / {
#         add_header 'Access-Control-Allow-Origin' '*';
#         proxy_pass http://host.docker.internal:3000/;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_cache NginxCache;
#         proxy_cache_methods GET;
#         proxy_cache_valid 200 10m;
#         proxy_cache_valid 404 5m;

#         proxy_ignore_headers Vary;
#         proxy_cache_bypass $cookie_sessionid;
#         add_header X-Proxy-Cache $upstream_cache_status;

#         # Add custom logging directives here
#        access_log /var/log/nginx/root_access.log;
#     }

#     location /api/ {
#         add_header 'Access-Control-Allow-Origin' '*';
#         # proxy_pass http://app:8080; if running on docker, app is the name of service
#         proxy_pass http://host.docker.internal:8888/;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_cache_bypass $http_upgrade;


#       access_log /var/log/nginx/api_access.log;
#     }

#     location /fastapi/ {
#         proxy_pass http://host.docker.internal:9000/;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_cache_bypass $http_upgrade;
#    access_log /var/log/nginx/fastapi_access.log;
#     }
# }
# }

# -------------------------
# server {
#     listen 80;

#     location /fe/ {
#         proxy_pass http://host.docker.internal:3000/;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';

#         # Cache Configuration
#         proxy_cache nginx_cache; # Use an existing or define a cache zone.
#         proxy_cache_valid 200 10m; # Cache successful responses for 10 minutes.
#         proxy_cache_min_uses 1; # Minimum number of requests before caching.

#         proxy_cache_methods GET HEAD; # Cache only GET and HEAD requests.
#         proxy_cache_key "$scheme$request_method$host$request_uri";

#         proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;

#         proxy_ignore_headers Cache-Control Expires;

#         proxy_cache_bypass $http_upgrade;
#     }

#     location / {
#         proxy_pass http://host.docker.internal:3000/;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_cache_bypass $http_upgrade;
#     }

#     # Your other location blocks...
# }



#     location /api/ {
#         proxy_pass http://app:8080;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     }
#         proxy_pass http://127.0.0.1:3000;


#             location / {
#         add_header 'Access-Control-Allow-Origin' 'http://localhost:3000';
#         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
#         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
#         add_header 'Access-Control-Allow-Credentials' 'true';
#         if ($request_method = 'OPTIONS') {
#             add_header 'Access-Control-Max-Age' 1728000;
#             add_header 'Content-Type' 'text/plain charset=UTF-8';
#             add_header 'Content-Length' 0;
#             return 204;
#         }
#     }


#     server {
#     listen 80 default_server;
#     listen [::]:80 default_server;

#     root /var/www/html;
#     index index.html index.htm index.nginx-debian.html;

#     server_name _;

#     location / {
#         try_files $uri $uri/ =404;
#     }
# }
# new add 
#   log_format myformat '$remote_addr - $remote_user [$time_local] "'
#                    '"$request" $status $body_bytes_sent "'
#                    '"$http_referer" "$http_user_agent"';
# access_log /var/log/nginx/access.log myformat; 


# proxy_cache_path /var/cache/nginx
#     keys_zone=NginxCache:20m
#     inactive=60m
#     levels=1:2
#     max_size=10g;

# limit_req_zone $binary_remote_addr zone=limitbyaddr:10m rate=1r/s;  # Rate limiting
# limit_req_status 429;

server {
    listen 80;
    # limit_req zone=limitbyaddr burst=10 delay=5;  

    location / {

     


        proxy_pass http://host.docker.internal:3000/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
        access_log /var/log/nginx/fe_access.log; 
    }



    location /api/ {
        add_header 'Access-Control-Allow-Origin' '*';
        # Replace with actual backend service name if using Docker
        proxy_pass http://host.docker.internal:8888/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        # proxy_cache_bypass $http_upgrade;
        # access_log /var/log/nginx/access.log myformat;  # Use main access log
    }

    location /fastapi/ {
        proxy_pass http://host.docker.internal:9000/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        # proxy_cache_bypass $http_upgrade;
        # access_log /var/log/nginx/access.log myformat;  # Use main access log
    }
# http://next-app-admin:3001
    location /test/ {
            #  proxy_pass  http://admin-app:3001/;
        # proxy_pass http://host.docker.internal:3001/test/;


    proxy_pass http://host.docker.internal:3001;
        #    proxy_pass http://next-app-admin:3001/;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';


    }
    location /test2/ {
        add_header 'Access-Control-Allow-Origin' '*';
        # Replace with actual backend service name if using Docker
        proxy_pass http://host.docker.internal:8888/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        # proxy_cache_bypass $http_upgrade;
        # access_log /var/log/nginx/access.log myformat;  # Use main access log
    }

}

        # rewrite ^/test/_next/static/media/(.*)$ /test/_next/static/media/$1 break;
        # proxy_cache_bypass $http_upgrade;
        # access_log /var/log/nginx/access.log myformat;  # Use main access log